<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Crash | Thinking...]]></title>
  <link href="http://kaihaodir.github.io/blog/categories/crash/atom.xml" rel="self"/>
  <link href="http://kaihaodir.github.io/"/>
  <updated>2016-08-31T18:54:07+08:00</updated>
  <id>http://kaihaodir.github.io/</id>
  <author>
    <name><![CDATA[Kai]]></name>
    <email><![CDATA[kaihaodir@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dealloc 时取 Weak Self 时崩溃]]></title>
    <link href="http://kaihaodir.github.io/blog/2016/05/10/store-weak-crash-in-dealloc/"/>
    <updated>2016-05-10T15:15:20+08:00</updated>
    <id>http://kaihaodir.github.io/blog/2016/05/10/store-weak-crash-in-dealloc</id>
    <content type="html"><![CDATA[<p>今天无意这中遇到一个奇怪的崩溃，先上引起崩溃的代码：</p>

<pre><code>- (void)dealloc
{
    __weak __typeof(self)weak_self = self;
    NSLog(@"%@", weak_self);
}
</code></pre>

<p>当执行到dealloc的时候，程序就crash 掉了。</p>

<!--MORE-->


<p> 崩溃信息如下：</p>

<pre><code>objc[4572]: Cannot form weak reference to instance (0x160f6f890) of class MFChatRoomBoardController. It is possible that this object was over-released, or is in the process of deallocation.
(lldb) 
error: empty command
(lldb) bt
* thread #1: tid = 0x35914d, 0x0000000182307aac libobjc.A.dylib`_objc_trap(), queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x182307aac)
  * frame #0: 0x0000000182307aac libobjc.A.dylib`_objc_trap()
    frame #1: 0x0000000182307b24 libobjc.A.dylib`_objc_fatal(char const*, ...) + 88
    frame #2: 0x0000000182319890 libobjc.A.dylib`weak_register_no_lock + 316
    frame #3: 0x0000000182320688 libobjc.A.dylib`objc_initWeak + 224
    frame #4: 0x000000010022bf8c MakeFriends`-[MFChatRoomBoardController dealloc](self=0x0000000160f6f890, _cmd="dealloc") + 36 at MFChatRoomBoardController.m:31
</code></pre>

<p>其中，可以在控制台明确看到这样一段描述:</p>

<blockquote><p>objc[4572]: Cannot form weak reference to instance (0x160f6f890) of class MFChatRoomBoardController. It is possible that this object was over-released, or is in the process of deallocation.</p></blockquote>

<p>说明不允许在 dealloc 的时候取 weak self.</p>

<p>查看了一下 <code>weak_register_no_lock</code> 的函数代码，找到问题所在。</p>

<pre><code>id 
weak_register_no_lock(weak_table_t *weak_table, id referent_id, id *referrer_id)
{
    objc_object *referent = (objc_object *)referent_id;
    objc_object **referrer = (objc_object **)referrer_id;

    if (!referent  ||  referent-&gt;isTaggedPointer()) return referent_id;

    // ensure that the referenced object is viable
    bool deallocating;
    if (!referent-&gt;ISA()-&gt;hasCustomRR()) {
        deallocating = referent-&gt;rootIsDeallocating();
    }
    else {
        BOOL (*allowsWeakReference)(objc_object *, SEL) = 
            (BOOL(*)(objc_object *, SEL))
            object_getMethodImplementation((id)referent, 
                                           SEL_allowsWeakReference);
        if ((IMP)allowsWeakReference == _objc_msgForward) {
            return nil;
        }
        deallocating =
            ! (*allowsWeakReference)(referent, SEL_allowsWeakReference);
    }

    if (deallocating) {
        _objc_fatal("Cannot form weak reference to instance (%p) of "
                    "class %s. It is possible that this object was "
                    "over-released, or is in the process of deallocation.",
                    (void*)referent, object_getClassName((id)referent));
    }

    // now remember it and where it is being stored
    weak_entry_t *entry;
    if ((entry = weak_entry_for_referent(weak_table, referent))) {
        append_referrer(entry, referrer);
    } 
    else {
        weak_entry_t new_entry;
        new_entry.referent = referent;
        new_entry.out_of_line = 0;
        new_entry.inline_referrers[0] = referrer;
        for (size_t i = 1; i &lt; WEAK_INLINE_COUNT; i++) {
            new_entry.inline_referrers[i] = nil;
        }

        weak_grow_maybe(weak_table);
        weak_entry_insert(weak_table, &amp;new_entry);
    }

    // Do not set *referrer. objc_storeWeak() requires that the 
    // value not change.

    return referent_id;
}
</code></pre>

<p>可以看出，runtime 是通过检查引用计数的个数来判断对象是否在 deallocting， 然后通过</p>

<pre><code>    if (deallocating) {
        _objc_fatal("Cannot form weak reference to instance (%p) of "
                    "class %s. It is possible that this object was "
                    "over-released, or is in the process of deallocation.",
                    (void*)referent, object_getClassName((id)referent));
    }
</code></pre>

<p>这段代码让程序crash。</p>

<p>再看一下 _objc_fatal 这个函数</p>

<pre><code>void _objc_fatal(const char *fmt, ...)
{
    va_list ap; 
    char *buf1;
    char *buf2;

    va_start(ap,fmt); 
    vasprintf(&amp;buf1, fmt, ap);
    va_end (ap);

    asprintf(&amp;buf2, "objc[%d]: %s\n", getpid(), buf1);
    _objc_syslog(buf2);
    _objc_crashlog(buf2);

    _objc_trap();
}
</code></pre>

<p>可以看到这个函数实际会在控制台输出一段信息，然后调用 _bojc_trap() 引起 crash. 而最后一个函数调用刚好也对上我们之前的崩溃堆栈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[_delegateScrollViewAnimationEnded Crash处理]]></title>
    <link href="http://kaihaodir.github.io/blog/2016/03/30/uiscrollview-delegatescrollviewanimationended-crash/"/>
    <updated>2016-03-30T00:57:31+08:00</updated>
    <id>http://kaihaodir.github.io/blog/2016/03/30/uiscrollview-delegatescrollviewanimationended-crash</id>
    <content type="html"><![CDATA[<p>在项目开发过程中，多次遇到UIScrollView滑动时引起的崩溃，在这里分析一下，mark 下处理过程。</p>

<p>先看一下崩溃堆栈：</p>

<pre><code>(lldb) bt all
* thread #1: tid = 0x4bb501, 0x00000001058451a8 CoreFoundation`___forwarding___ + 776, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS  (code=EXC_I386_GPFLT)
    frame #0: 0x00000001058451a8 CoreFoundation`___forwarding___ + 776
    frame #1: 0x0000000105844e18 CoreFoundation`__forwarding_prep_0___ + 120
  * frame #2: 0x0000000105d6884d UIKit`-[UIScrollView(UIScrollViewInternal) _delegateScrollViewAnimationEnded] + 46
    frame #3: 0x0000000105d6894f UIKit`-[UIScrollView(UIScrollViewInternal) _scrollViewAnimationEnded:finished:] + 181
    frame #4: 0x0000000105dddab7 UIKit`-[UIAnimator stopAnimation:] + 395
    frame #5: 0x0000000105dde0bf UIKit`-[UIAnimator(Static) _advanceAnimationsOfType:withTimestamp:] + 234
    frame #6: 0x00000001095a5747 QuartzCore`CA::Display::DisplayLinkItem::dispatch() + 37
    frame #7: 0x00000001095a560f QuartzCore`CA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 315
    frame #8: 0x000000010584df64 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
    frame #9: 0x000000010584db25 CoreFoundation`__CFRunLoopDoTimer + 1045
    frame #10: 0x0000000105810e5d CoreFoundation`__CFRunLoopRun + 1901
    frame #11: 0x0000000105810486 CoreFoundation`CFRunLoopRunSpecific + 470
    frame #12: 0x0000000108e799f0 GraphicsServices`GSEventRunModal + 161
    frame #13: 0x0000000105cd1420 UIKit`UIApplicationMain + 1282
    frame #14: 0x000000010504f32f UIScrollViewDelegate`main(argc=1, argv=0x00007fff5abb0360) + 111 at main.m:14
    frame #15: 0x0000000107e5e145 libdyld.dylib`start + 1
</code></pre>

<!--MORE-->


<p>从崩溃信息里面，我们可以看到 <strong> stop reason = EXC_BAD_ACCESS </strong>， 非法地址访问（野指针）。从堆栈 <strong>[UIAnimator stopAnimation:] -> [UIScrollView(UIScrollViewInternal) _scrollViewAnimationEnded:finished:] </strong> 可以看出是动画完成后，调用scrollview的方法引起的非法访问。经过实验验证，是scrollview.delegate 引起的。 <strong>也就是说，scrollview在做动画的过程中，scrollview.delegate 被释放了。</strong>*</p>

<p>简单写了一些测试代码重现了这个崩溃</p>

<pre><code>@implementation ScrollViewController

- (IBAction)onBackClick:(id)sender
{
    [self.scrollview setContentOffset:CGPointMake(0, self.scrollview.bounds.size.height * 3) animated:YES];
    [self.navigationController popViewControllerAnimated:NO];
}
</code></pre>

<ul>
<li>在iOS7 和 iOS8 的系统下，一点返回按钮，pop 出当前页面，就会马上崩溃。</li>
<li>在iOS9下没有问题（由于属性修饰符改成weak）</li>
</ul>


<pre><code>//iOS9 以前
@property(nonatomic,unsafe_unretain) id&lt;UIScrollViewDelegate&gt; delegate; 

//iOS9
@property(nullable,nonatomic,weak) id&lt;UIScrollViewDelegate&gt; delegate; 
</code></pre>

<h3>解决方法：</h3>

<p>崩溃的原因已经很明确，只要可以保证UIScrollView 的 delegate对象在释放的时候，把<code>scrollview.dlegate = nil;</code> 就可以解决问题。</p>

<pre><code>@implementation ScrollViewController
- (void)dealloc {
    self.scrollview.delegate = nil;
}
</code></pre>

<p>主动设置 scrollview.delegate = nil; 可以很好的解决崩溃。但是稍不注意，项目组的其他开发同事又很容易忘记，或者一不小心，又引起崩溃了。有没有办法可以一劳永逸呢？</p>

<h3>更好的解决方法：</h3>

<p>主要思路：通过Runtime，修改 dealloc 方法，让代理对象在释放时自动把scrollview.delegate置空。</p>

<ol>
<li><p>首先，通过 <strong>method swizzling</strong> 给NSObject添加 deallocBlock <a href="https://github.com/kaihaodir/BSUiKit/blob/master/NSObject%2BDealloc.m">查看完成代码</a></p>

<pre><code class="`"> typedef void (^DeallocCallback)();

 @interface NSObject(Deallocing)

 + (void)hookNSObjectDealloc;

 - (void)setDeallocCallback:(DeallocCallback)callback;

 - (DeallocCallback)deallocCallback;

 @end



 @implementation NSObject(Deallocing)
 - (void)myselfDealloc {
     DeallocCallback callback = [self deallocCallback];
     if (callback) {
         callback(); //对象释放前的主要操作
     }

 [self originalDealloc];
 }
 @end
</code></pre></li>
<li><p>通过<strong>method swizzling</strong> 修改UIScrollView 的 <strong>setDelegate</strong> 方法</p>

<pre><code class="`"> - (void)myselfSetDelegate:(NSObject *)delegate
 {
     if (delegate) {
         UIScrollView * __weak weak_self = (UIScrollView *)self;
         [delegate setDeallocCallback:^{
             weak_self.delegate = nil;
         }];
     }
     //调用原来方法
     [self originalSetDelegate:delegate];
 }   
</code></pre></li>
<li><p>在App初始化的时候，调用一下 ScrollView 的 swizzling 方法，就可以解决这类型的崩溃（包括：UITableView, UIWebView, UICollectionView 动画时delegate被释放引起的崩溃）</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
